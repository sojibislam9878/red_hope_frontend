import React, { useState } from "react";
import {
  Heart,
  User,
  Mail,
  Phone,
  MapPin,
  Calendar,
  Shield,
  CheckCircle,
  Droplets,
} from "lucide-react";

const bloodTypes = ["A+", "A-", "B+", "B-", "AB+", "AB-", "O+", "O-"];

const SignUpPage = () => {
  const [formData, setFormData] = useState({
    firstName: "",
    lastName: "",
    email: "",
    phone: "",
    dateOfBirth: "",
    gender: "",
    address: "",
    city: "",
    state: "",
    zipCode: "",
    bloodType: "",
    weight: "",
    height: "",
    hasChronicConditions: "",
    chronicConditions: "",
    takingMedications: "",
    medications: "",
    recentTattoo: "",
    recentTravel: "",
    emergencyName: "",
    emergencyPhone: "",
    emergencyRelation: "",
    termsAccepted: false,
    privacyAccepted: false,
    contactConsent: false,
  });

  const [currentStep, setCurrentStep] = useState(1);
  const [errors, setErrors] = useState({});
  const [isSubmitting, setIsSubmitting] = useState(false);

  const updateFormData = (field, value) => {
    setFormData((prev) => ({ ...prev, [field]: value }));
    // Clear error when user starts typing
    if (errors[field]) {
      setErrors((prev) => ({ ...prev, [field]: "" }));
    }
  };

  const validateStep = (step) => {
    const newErrors = {};

    switch (step) {
      case 1:
        if (!formData.firstName.trim())
          newErrors.firstName = "First name is required";
        if (!formData.lastName.trim())
          newErrors.lastName = "Last name is required";
        if (!formData.email.trim()) newErrors.email = "Email is required";
        else if (!/\S+@\S+\.\S+/.test(formData.email))
          newErrors.email = "Invalid email format";
        if (!formData.phone.trim())
          newErrors.phone = "Phone number is required";
        if (!formData.dateOfBirth)
          newErrors.dateOfBirth = "Date of birth is required";
        if (!formData.gender) newErrors.gender = "Gender selection is required";
        break;

      case 2:
        if (!formData.address.trim()) newErrors.address = "Address is required";
        if (!formData.city.trim()) newErrors.city = "City is required";
        if (!formData.state.trim()) newErrors.state = "State is required";
        if (!formData.zipCode.trim())
          newErrors.zipCode = "ZIP code is required";
        break;

      case 3:
        if (!formData.bloodType) newErrors.bloodType = "Blood type is required";
        if (!formData.weight.trim()) newErrors.weight = "Weight is required";
        if (!formData.height.trim()) newErrors.height = "Height is required";
        break;

      case 4:
        if (!formData.hasChronicConditions)
          newErrors.hasChronicConditions = "Please select an option";
        if (!formData.takingMedications)
          newErrors.takingMedications = "Please select an option";
        if (!formData.recentTattoo)
          newErrors.recentTattoo = "Please select an option";
        if (!formData.recentTravel)
          newErrors.recentTravel = "Please select an option";
        break;

      case 5:
        if (!formData.emergencyName.trim())
          newErrors.emergencyName = "Emergency contact name is required";
        if (!formData.emergencyPhone.trim())
          newErrors.emergencyPhone = "Emergency contact phone is required";
        if (!formData.emergencyRelation.trim())
          newErrors.emergencyRelation = "Relationship is required";
        if (!formData.termsAccepted)
          newErrors.termsAccepted = "You must accept the terms and conditions";
        if (!formData.privacyAccepted)
          newErrors.privacyAccepted = "You must accept the privacy policy";
        break;
    }

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleNext = () => {
    if (validateStep(currentStep)) {
      setCurrentStep((prev) => Math.min(prev + 1, 5));
    }
  };

  const handlePrevious = () => {
    setCurrentStep((prev) => Math.max(prev - 1, 1));
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    if (!validateStep(5)) return;

    setIsSubmitting(true);
    // Simulate API call
    await new Promise((resolve) => setTimeout(resolve, 2000));
    setIsSubmitting(false);
    alert("Registration successful! We will contact you soon.");
  };

  const renderStep = () => {
    switch (currentStep) {
      case 1:
        return (
          <div className="space-y-6">
            <div className="text-center mb-8">
              <h2 className="text-2xl font-bold text-gray-800 mb-2">
                Personal Information
              </h2>
              <p className="text-gray-600">
                Let's start with your basic details
              </p>
            </div>

            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  <User className="inline w-4 h-4 mr-1" />
                  First Name *
                </label>
                <input
                  type="text"
                  value={formData.firstName}
                  onChange={(e) => updateFormData("firstName", e.target.value)}
                  className={`w-full px-4 py-3 rounded-lg border transition-all duration-200 focus:ring-2 focus:ring-red-500 focus:border-red-500 ${
                    errors.firstName
                      ? "border-red-300 bg-red-50"
                      : "border-gray-300 focus:bg-white"
                  }`}
                  placeholder="Enter your first name"
                />
                {errors.firstName && (
                  <p className="text-red-500 text-sm mt-1">
                    {errors.firstName}
                  </p>
                )}
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Last Name *
                </label>
                <input
                  type="text"
                  value={formData.lastName}
                  onChange={(e) => updateFormData("lastName", e.target.value)}
                  className={`w-full px-4 py-3 rounded-lg border transition-all duration-200 focus:ring-2 focus:ring-red-500 focus:border-red-500 ${
                    errors.lastName
                      ? "border-red-300 bg-red-50"
                      : "border-gray-300 focus:bg-white"
                  }`}
                  placeholder="Enter your last name"
                />
                {errors.lastName && (
                  <p className="text-red-500 text-sm mt-1">{errors.lastName}</p>
                )}
              </div>
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                <Mail className="inline w-4 h-4 mr-1" />
                Email Address *
              </label>
              <input
                type="email"
                value={formData.email}
                onChange={(e) => updateFormData("email", e.target.value)}
                className={`w-full px-4 py-3 rounded-lg border transition-all duration-200 focus:ring-2 focus:ring-red-500 focus:border-red-500 ${
                  errors.email
                    ? "border-red-300 bg-red-50"
                    : "border-gray-300 focus:bg-white"
                }`}
                placeholder="your.email@example.com"
              />
              {errors.email && (
                <p className="text-red-500 text-sm mt-1">{errors.email}</p>
              )}
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                <Phone className="inline w-4 h-4 mr-1" />
                Phone Number *
              </label>
              <input
                type="tel"
                value={formData.phone}
                onChange={(e) => updateFormData("phone", e.target.value)}
                className={`w-full px-4 py-3 rounded-lg border transition-all duration-200 focus:ring-2 focus:ring-red-500 focus:border-red-500 ${
                  errors.phone
                    ? "border-red-300 bg-red-50"
                    : "border-gray-300 focus:bg-white"
                }`}
                placeholder="(555) 123-4567"
              />
              {errors.phone && (
                <p className="text-red-500 text-sm mt-1">{errors.phone}</p>
              )}
            </div>

            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  <Calendar className="inline w-4 h-4 mr-1" />
                  Date of Birth *
                </label>
                <input
                  type="date"
                  value={formData.dateOfBirth}
                  onChange={(e) =>
                    updateFormData("dateOfBirth", e.target.value)
                  }
                  className={`w-full px-4 py-3 rounded-lg border transition-all duration-200 focus:ring-2 focus:ring-red-500 focus:border-red-500 ${
                    errors.dateOfBirth
                      ? "border-red-300 bg-red-50"
                      : "border-gray-300 focus:bg-white"
                  }`}
                />
                {errors.dateOfBirth && (
                  <p className="text-red-500 text-sm mt-1">
                    {errors.dateOfBirth}
                  </p>
                )}
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Gender *
                </label>
                <select
                  value={formData.gender}
                  onChange={(e) => updateFormData("gender", e.target.value)}
                  className={`w-full px-4 py-3 rounded-lg border transition-all duration-200 focus:ring-2 focus:ring-red-500 focus:border-red-500 ${
                    errors.gender
                      ? "border-red-300 bg-red-50"
                      : "border-gray-300 focus:bg-white"
                  }`}
                >
                  <option value="">Select gender</option>
                  <option value="male">Male</option>
                  <option value="female">Female</option>
                  <option value="other">Other</option>
                  <option value="prefer-not-to-say">Prefer not to say</option>
                </select>
                {errors.gender && (
                  <p className="text-red-500 text-sm mt-1">{errors.gender}</p>
                )}
              </div>
            </div>
          </div>
        );

      case 2:
        return (
          <div className="space-y-6">
            <div className="text-center mb-8">
              <h2 className="text-2xl font-bold text-gray-800 mb-2">
                Address Information
              </h2>
              <p className="text-gray-600">Where can we reach you?</p>
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                <MapPin className="inline w-4 h-4 mr-1" />
                Street Address *
              </label>
              <input
                type="text"
                value={formData.address}
                onChange={(e) => updateFormData("address", e.target.value)}
                className={`w-full px-4 py-3 rounded-lg border transition-all duration-200 focus:ring-2 focus:ring-red-500 focus:border-red-500 ${
                  errors.address
                    ? "border-red-300 bg-red-50"
                    : "border-gray-300 focus:bg-white"
                }`}
                placeholder="123 Main Street"
              />
              {errors.address && (
                <p className="text-red-500 text-sm mt-1">{errors.address}</p>
              )}
            </div>

            <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  City *
                </label>
                <input
                  type="text"
                  value={formData.city}
                  onChange={(e) => updateFormData("city", e.target.value)}
                  className={`w-full px-4 py-3 rounded-lg border transition-all duration-200 focus:ring-2 focus:ring-red-500 focus:border-red-500 ${
                    errors.city
                      ? "border-red-300 bg-red-50"
                      : "border-gray-300 focus:bg-white"
                  }`}
                  placeholder="Your city"
                />
                {errors.city && (
                  <p className="text-red-500 text-sm mt-1">{errors.city}</p>
                )}
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  State *
                </label>
                <input
                  type="text"
                  value={formData.state}
                  onChange={(e) => updateFormData("state", e.target.value)}
                  className={`w-full px-4 py-3 rounded-lg border transition-all duration-200 focus:ring-2 focus:ring-red-500 focus:border-red-500 ${
                    errors.state
                      ? "border-red-300 bg-red-50"
                      : "border-gray-300 focus:bg-white"
                  }`}
                  placeholder="State"
                />
                {errors.state && (
                  <p className="text-red-500 text-sm mt-1">{errors.state}</p>
                )}
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  ZIP Code *
                </label>
                <input
                  type="text"
                  value={formData.zipCode}
                  onChange={(e) => updateFormData("zipCode", e.target.value)}
                  className={`w-full px-4 py-3 rounded-lg border transition-all duration-200 focus:ring-2 focus:ring-red-500 focus:border-red-500 ${
                    errors.zipCode
                      ? "border-red-300 bg-red-50"
                      : "border-gray-300 focus:bg-white"
                  }`}
                  placeholder="12345"
                />
                {errors.zipCode && (
                  <p className="text-red-500 text-sm mt-1">{errors.zipCode}</p>
                )}
              </div>
            </div>
          </div>
        );

      case 3:
        return (
          <div className="space-y-6">
            <div className="text-center mb-8">
              <h2 className="text-2xl font-bold text-gray-800 mb-2">
                Medical Information
              </h2>
              <p className="text-gray-600">
                Basic health information for donation eligibility
              </p>
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-4">
                <Droplets className="inline w-4 h-4 mr-1" />
                Blood Type *
              </label>
              <div className="grid grid-cols-4 gap-3">
                {bloodTypes.map((type) => (
                  <button
                    key={type}
                    type="button"
                    onClick={() => updateFormData("bloodType", type)}
                    className={`px-4 py-3 rounded-lg border-2 transition-all duration-200 font-semibold ${
                      formData.bloodType === type
                        ? "border-red-500 bg-red-50 text-red-700"
                        : "border-gray-200 hover:border-red-300 hover:bg-red-25"
                    }`}
                  >
                    {type}
                  </button>
                ))}
              </div>
              {errors.bloodType && (
                <p className="text-red-500 text-sm mt-2">{errors.bloodType}</p>
              )}
            </div>

            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Weight (lbs) *
                </label>
                <input
                  type="number"
                  value={formData.weight}
                  onChange={(e) => updateFormData("weight", e.target.value)}
                  className={`w-full px-4 py-3 rounded-lg border transition-all duration-200 focus:ring-2 focus:ring-red-500 focus:border-red-500 ${
                    errors.weight
                      ? "border-red-300 bg-red-50"
                      : "border-gray-300 focus:bg-white"
                  }`}
                  placeholder="150"
                  min="110"
                />
                {errors.weight && (
                  <p className="text-red-500 text-sm mt-1">{errors.weight}</p>
                )}
                <p className="text-xs text-gray-500 mt-1">
                  Minimum 110 lbs required for donation
                </p>
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Height (inches) *
                </label>
                <input
                  type="number"
                  value={formData.height}
                  onChange={(e) => updateFormData("height", e.target.value)}
                  className={`w-full px-4 py-3 rounded-lg border transition-all duration-200 focus:ring-2 focus:ring-red-500 focus:border-red-500 ${
                    errors.height
                      ? "border-red-300 bg-red-50"
                      : "border-gray-300 focus:bg-white"
                  }`}
                  placeholder="68"
                  min="48"
                  max="84"
                />
                {errors.height && (
                  <p className="text-red-500 text-sm mt-1">{errors.height}</p>
                )}
              </div>
            </div>
          </div>
        );

      case 4:
        return (
          <div className="space-y-6">
            <div className="text-center mb-8">
              <h2 className="text-2xl font-bold text-gray-800 mb-2">
                Medical History
              </h2>
              <p className="text-gray-600">Help us ensure donation safety</p>
            </div>

            <div className="space-y-6">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-3">
                  Do you have any chronic medical conditions? *
                </label>
                <div className="space-y-2">
                  {["yes", "no"].map((option) => (
                    <label key={option} className="flex items-center">
                      <input
                        type="radio"
                        name="hasChronicConditions"
                        value={option}
                        checked={formData.hasChronicConditions === option}
                        onChange={(e) =>
                          updateFormData("hasChronicConditions", e.target.value)
                        }
                        className="mr-3 text-red-500 focus:ring-red-500"
                      />
                      <span className="capitalize">{option}</span>
                    </label>
                  ))}
                </div>
                {errors.hasChronicConditions && (
                  <p className="text-red-500 text-sm mt-1">
                    {errors.hasChronicConditions}
                  </p>
                )}
              </div>

              {formData.hasChronicConditions === "yes" && (
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Please specify your conditions
                  </label>
                  <textarea
                    value={formData.chronicConditions}
                    onChange={(e) =>
                      updateFormData("chronicConditions", e.target.value)
                    }
                    className="w-full px-4 py-3 rounded-lg border border-gray-300 focus:ring-2 focus:ring-red-500 focus:border-red-500"
                    rows={3}
                    placeholder="Please list any chronic conditions..."
                  />
                </div>
              )}

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-3">
                  Are you currently taking any medications? *
                </label>
                <div className="space-y-2">
                  {["yes", "no"].map((option) => (
                    <label key={option} className="flex items-center">
                      <input
                        type="radio"
                        name="takingMedications"
                        value={option}
                        checked={formData.takingMedications === option}
                        onChange={(e) =>
                          updateFormData("takingMedications", e.target.value)
                        }
                        className="mr-3 text-red-500 focus:ring-red-500"
                      />
                      <span className="capitalize">{option}</span>
                    </label>
                  ))}
                </div>
                {errors.takingMedications && (
                  <p className="text-red-500 text-sm mt-1">
                    {errors.takingMedications}
                  </p>
                )}
              </div>

              {formData.takingMedications === "yes" && (
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Please list your current medications
                  </label>
                  <textarea
                    value={formData.medications}
                    onChange={(e) =>
                      updateFormData("medications", e.target.value)
                    }
                    className="w-full px-4 py-3 rounded-lg border border-gray-300 focus:ring-2 focus:ring-red-500 focus:border-red-500"
                    rows={3}
                    placeholder="Please list all current medications..."
                  />
                </div>
              )}

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-3">
                  Have you gotten a tattoo or piercing in the last 3 months? *
                </label>
                <div className="space-y-2">
                  {["yes", "no"].map((option) => (
                    <label key={option} className="flex items-center">
                      <input
                        type="radio"
                        name="recentTattoo"
                        value={option}
                        checked={formData.recentTattoo === option}
                        onChange={(e) =>
                          updateFormData("recentTattoo", e.target.value)
                        }
                        className="mr-3 text-red-500 focus:ring-red-500"
                      />
                      <span className="capitalize">{option}</span>
                    </label>
                  ))}
                </div>
                {errors.recentTattoo && (
                  <p className="text-red-500 text-sm mt-1">
                    {errors.recentTattoo}
                  </p>
                )}
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-3">
                  Have you traveled outside the US in the last year? *
                </label>
                <div className="space-y-2">
                  {["yes", "no"].map((option) => (
                    <label key={option} className="flex items-center">
                      <input
                        type="radio"
                        name="recentTravel"
                        value={option}
                        checked={formData.recentTravel === option}
                        onChange={(e) =>
                          updateFormData("recentTravel", e.target.value)
                        }
                        className="mr-3 text-red-500 focus:ring-red-500"
                      />
                      <span className="capitalize">{option}</span>
                    </label>
                  ))}
                </div>
                {errors.recentTravel && (
                  <p className="text-red-500 text-sm mt-1">
                    {errors.recentTravel}
                  </p>
                )}
              </div>
            </div>
          </div>
        );

      case 5:
        return (
          <div className="space-y-6">
            <div className="text-center mb-8">
              <h2 className="text-2xl font-bold text-gray-800 mb-2">
                Emergency Contact & Terms
              </h2>
              <p className="text-gray-600">
                Final step to complete your registration
              </p>
            </div>

            <div className="bg-gray-50 p-6 rounded-lg">
              <h3 className="text-lg font-semibold text-gray-800 mb-4">
                Emergency Contact Information
              </h3>

              <div className="space-y-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Contact Name *
                  </label>
                  <input
                    type="text"
                    value={formData.emergencyName}
                    onChange={(e) =>
                      updateFormData("emergencyName", e.target.value)
                    }
                    className={`w-full px-4 py-3 rounded-lg border transition-all duration-200 focus:ring-2 focus:ring-red-500 focus:border-red-500 ${
                      errors.emergencyName
                        ? "border-red-300 bg-red-50"
                        : "border-gray-300 focus:bg-white"
                    }`}
                    placeholder="Full name of emergency contact"
                  />
                  {errors.emergencyName && (
                    <p className="text-red-500 text-sm mt-1">
                      {errors.emergencyName}
                    </p>
                  )}
                </div>

                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                      Phone Number *
                    </label>
                    <input
                      type="tel"
                      value={formData.emergencyPhone}
                      onChange={(e) =>
                        updateFormData("emergencyPhone", e.target.value)
                      }
                      className={`w-full px-4 py-3 rounded-lg border transition-all duration-200 focus:ring-2 focus:ring-red-500 focus:border-red-500 ${
                        errors.emergencyPhone
                          ? "border-red-300 bg-red-50"
                          : "border-gray-300 focus:bg-white"
                      }`}
                      placeholder="(555) 123-4567"
                    />
                    {errors.emergencyPhone && (
                      <p className="text-red-500 text-sm mt-1">
                        {errors.emergencyPhone}
                      </p>
                    )}
                  </div>

                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                      Relationship *
                    </label>
                    <select
                      value={formData.emergencyRelation}
                      onChange={(e) =>
                        updateFormData("emergencyRelation", e.target.value)
                      }
                      className={`w-full px-4 py-3 rounded-lg border transition-all duration-200 focus:ring-2 focus:ring-red-500 focus:border-red-500 ${
                        errors.emergencyRelation
                          ? "border-red-300 bg-red-50"
                          : "border-gray-300 focus:bg-white"
                      }`}
                    >
                      <option value="">Select relationship</option>
                      <option value="spouse">Spouse</option>
                      <option value="parent">Parent</option>
                      <option value="child">Child</option>
                      <option value="sibling">Sibling</option>
                      <option value="friend">Friend</option>
                      <option value="other">Other</option>
                    </select>
                    {errors.emergencyRelation && (
                      <p className="text-red-500 text-sm mt-1">
                        {errors.emergencyRelation}
                      </p>
                    )}
                  </div>
                </div>
              </div>
            </div>

            <div className="space-y-4">
              <div className="flex items-start space-x-3">
                <input
                  type="checkbox"
                  id="terms"
                  checked={formData.termsAccepted}
                  onChange={(e) =>
                    updateFormData("termsAccepted", e.target.checked)
                  }
                  className="mt-1 text-red-500 focus:ring-red-500"
                />
                <label htmlFor="terms" className="text-sm text-gray-700">
                  I agree to the{" "}
                  <a
                    href="#"
                    className="text-red-600 hover:text-red-800 underline"
                  >
                    Terms and Conditions
                  </a>{" "}
                  *
                </label>
              </div>
              {errors.termsAccepted && (
                <p className="text-red-500 text-sm">{errors.termsAccepted}</p>
              )}

              <div className="flex items-start space-x-3">
                <input
                  type="checkbox"
                  id="privacy"
                  checked={formData.privacyAccepted}
                  onChange={(e) =>
                    updateFormData("privacyAccepted", e.target.checked)
                  }
                  className="mt-1 text-red-500 focus:ring-red-500"
                />
                <label htmlFor="privacy" className="text-sm text-gray-700">
                  I agree to the{" "}
                  <a
                    href="#"
                    className="text-red-600 hover:text-red-800 underline"
                  >
                    Privacy Policy
                  </a>{" "}
                  *
                </label>
              </div>
              {errors.privacyAccepted && (
                <p className="text-red-500 text-sm">{errors.privacyAccepted}</p>
              )}

              <div className="flex items-start space-x-3">
                <input
                  type="checkbox"
                  id="contact"
                  checked={formData.contactConsent}
                  onChange={(e) =>
                    updateFormData("contactConsent", e.target.checked)
                  }
                  className="mt-1 text-red-500 focus:ring-red-500"
                />
                <label htmlFor="contact" className="text-sm text-gray-700">
                  I consent to being contacted about donation opportunities and
                  health updates
                </label>
              </div>
            </div>
          </div>
        );

      default:
        return null;
    }
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-red-50 via-white to-red-50 py-12 px-4">
      <div className="max-w-4xl mx-auto">
        {/* Header */}
        <div className="text-center mb-12">
          <div className="flex items-center justify-center mb-4">
            <Heart className="w-12 h-12 text-red-600 mr-3" />
            <h1 className="text-4xl font-bold text-gray-800">LifeShare</h1>
          </div>
          <p className="text-xl text-gray-600 mb-2">
            Join Our Life-Saving Community
          </p>
          <p className="text-gray-500">Every donation can save up to 3 lives</p>
        </div>

        {/* Progress Bar */}
        <div className="mb-8">
          <div className="flex items-center justify-between mb-2">
            {[1, 2, 3, 4, 5].map((step) => (
              <div
                key={step}
                className={`flex items-center justify-center w-10 h-10 rounded-full border-2 transition-all duration-300 ${
                  currentStep >= step
                    ? "bg-red-600 border-red-600 text-white"
                    : "bg-white border-gray-300 text-gray-400"
                }`}
              >
                {currentStep > step ? (
                  <CheckCircle className="w-5 h-5" />
                ) : (
                  <span className="font-semibold">{step}</span>
                )}
              </div>
            ))}
          </div>
          <div className="w-full bg-gray-200 rounded-full h-2">
            <div
              className="bg-red-600 h-2 rounded-full transition-all duration-500"
              style={{ width: `${(currentStep / 5) * 100}%` }}
            ></div>
          </div>
          <div className="flex justify-between text-xs text-gray-500 mt-2">
            <span>Personal</span>
            <span>Address</span>
            <span>Medical</span>
            <span>History</span>
            <span>Complete</span>
          </div>
        </div>

        {/* Form Card */}
        <div className="bg-white rounded-2xl shadow-xl p-8">
          <form onSubmit={handleSubmit}>
            {renderStep()}

            {/* Navigation Buttons */}
            <div className="flex justify-between items-center mt-8 pt-6 border-t border-gray-200">
              <button
                type="button"
                onClick={handlePrevious}
                disabled={currentStep === 1}
                className={`px-6 py-3 rounded-lg font-semibold transition-all duration-200 ${
                  currentStep === 1
                    ? "bg-gray-100 text-gray-400 cursor-not-allowed"
                    : "bg-gray-200 text-gray-700 hover:bg-gray-300"
                }`}
              >
                Previous
              </button>

              {currentStep < 5 ? (
                <button
                  type="button"
                  onClick={handleNext}
                  className="px-8 py-3 bg-red-600 text-white rounded-lg font-semibold hover:bg-red-700 transition-all duration-200 flex items-center"
                >
                  Next Step
                  <CheckCircle className="w-4 h-4 ml-2" />
                </button>
              ) : (
                <button
                  type="submit"
                  disabled={isSubmitting}
                  className={`px-8 py-3 rounded-lg font-semibold transition-all duration-200 flex items-center ${
                    isSubmitting
                      ? "bg-gray-400 cursor-not-allowed"
                      : "bg-green-600 hover:bg-green-700 text-white"
                  }`}
                >
                  {isSubmitting ? (
                    <>
                      <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2"></div>
                      Registering...
                    </>
                  ) : (
                    <>
                      Complete Registration
                      <Shield className="w-4 h-4 ml-2" />
                    </>
                  )}
                </button>
              )}
            </div>
          </form>
        </div>

        {/* Footer Info */}
        <div className="mt-8 text-center text-gray-500 text-sm">
          <p className="flex items-center justify-center">
            <Shield className="w-4 h-4 mr-1" />
            Your information is protected and will only be used for donation
            coordination
          </p>
        </div>
      </div>
    </div>
  );
};

export default SignUpPage;
